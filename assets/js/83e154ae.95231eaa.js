"use strict";(self.webpackChunkredis_reading=self.webpackChunkredis_reading||[]).push([[6186],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),f=i,m=p["".concat(s,".").concat(f)]||p[f]||u[f]||a;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<a;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},446:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:5},o="Redis\u6e90\u7801\u9605\u8bfb adlist.c",l={unversionedId:"basics/adlist",id:"basics/adlist",title:"Redis\u6e90\u7801\u9605\u8bfb adlist.c",description:"adlist.c \u662f Redis \u4e2d\u5b9e\u73b0\u53cc\u5411\u94fe\u8868\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\uff0c\u5176\u4ee3\u7801\u4e3b\u8981\u7531\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a",source:"@site/docs/basics/adlist.md",sourceDirName:"basics",slug:"/basics/adlist",permalink:"/redis-reading/docs/basics/adlist",draft:!1,editUrl:"https://github.com/code-reading-lab/redis-reading/tree/docs/docs/basics/adlist.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Redis\u6e90\u7801\u9605\u8bfb dict.c",permalink:"/redis-reading/docs/basics/dict"},next:{title:"Redis\u6e90\u7801\u9605\u8bfb anet.c",permalink:"/redis-reading/docs/basics/anet"}},s={},d=[],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"redis\u6e90\u7801\u9605\u8bfb-adlistc"},"Redis\u6e90\u7801\u9605\u8bfb adlist.c"),(0,i.kt)("p",null,"adlist.c \u662f Redis \u4e2d\u5b9e\u73b0\u53cc\u5411\u94fe\u8868\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\uff0c\u5176\u4ee3\u7801\u4e3b\u8981\u7531\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u94fe\u8868\u8282\u70b9\u7ed3\u6784\u4f53\u5b9a\u4e49"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-c"}," typedef struct listNode {\n    struct listNode *prev;  // \u524d\u7f6e\u8282\u70b9\u6307\u9488\n    struct listNode *next;  // \u540e\u7f6e\u8282\u70b9\u6307\u9488\n    void *value;            // \u8282\u70b9\u503c\u6307\u9488\n} listNode;\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u94fe\u8868\u7ed3\u6784\u4f53\u5b9a\u4e49"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct list {\n    listNode *head;         // \u94fe\u8868\u5934\u8282\u70b9\u6307\u9488\n    listNode *tail;         // \u94fe\u8868\u5c3e\u8282\u70b9\u6307\u9488\n    unsigned long len;      // \u94fe\u8868\u957f\u5ea6\n    void *(*dup)(void *ptr);  // \u8282\u70b9\u503c\u590d\u5236\u51fd\u6570\u6307\u9488\n    void (*free)(void *ptr);  // \u8282\u70b9\u503c\u91ca\u653e\u51fd\u6570\u6307\u9488\n    int (*match)(void *ptr, void *key);  // \u8282\u70b9\u503c\u6bd4\u8f83\u51fd\u6570\u6307\u9488\n} list;\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u94fe\u8868\u521b\u5efa\u51fd\u6570"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-c"}," list *listCreate(void)\n {\n     struct list *list;\n\n     if ((list = zmalloc(sizeof(*list))) == NULL)\n         return NULL;\n     list->head = list->tail = NULL;\n     list->len = 0;\n     list->dup = NULL;\n     list->free = NULL;\n     list->match = NULL;\n     return list;\n }\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u94fe\u8868\u7684\u63d2\u5165"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-c"},"list *listInsertNode(list *list, listNode *old_node, void *value, int after) {\n listNode *node;\n\n if ((node = zmalloc(sizeof(*node))) == NULL)\n     return NULL;\n node->value = value;\n if (after) {\n     node->prev = old_node;\n     node->next = old_node->next;\n     if (list->tail == old_node) {\n         list->tail = node;\n     }\n } else {\n     node->next = old_node;\n     node->prev = old_node->prev;\n     if (list->head == old_node) {\n         list->head = node;\n     }\n }\n if (node->prev != NULL) {\n     node->prev->next = node;\n }\n if (node->next != NULL) {\n     node->next->prev = node;\n }\n   list->len++;\n   return list;\n }\n")))),(0,i.kt)("p",null,"\u603b\u7684\u6765\u8bf4\uff0cadlist.c \u5b9e\u73b0\u4e86 Redis \u4e2d\u53cc\u5411\u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u662f Redis \u4e2d\u591a\u4e2a\u6a21\u5757\u7684\u57fa\u7840\u6570\u636e\u7ed3\u6784\u3002\u638c\u63e1\u8be5\u6587\u4ef6\u7684\u6e90\u7801\u5b9e\u73b0\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u5730\u7406\u89e3 Redis \u7684\u5e95\u5c42\u5b9e\u73b0\uff0c\u5e76\u4e14\u63d0\u9ad8\u6211\u4eec\u7684\u4ee3\u7801\u80fd\u529b\u3002"))}u.isMDXComponent=!0}}]);