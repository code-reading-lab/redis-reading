"use strict";(self.webpackChunkredis_reading=self.webpackChunkredis_reading||[]).push([[3431],{3905:(e,t,n)=>{n.d(t,{Zo:()=>o,kt:()=>y});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},o=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=a,y=p["".concat(l,".").concat(u)]||p[u]||h[u]||r;return n?i.createElement(y,d(d({ref:t},o),{},{components:n})):i.createElement(y,d({ref:t},o))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,d=new Array(r);d[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,d[1]=s;for(var c=2;c<r;c++)d[c]=n[c];return i.createElement.apply(null,d)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7777:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:3},d="Redis\u6e90\u7801\u9605\u8bfb dict.c",s={unversionedId:"basics/dict",id:"basics/dict",title:"Redis\u6e90\u7801\u9605\u8bfb dict.c",description:"dict.c\u662fRedis\u6e90\u7801\u4e2d\u5b9e\u73b0\u5b57\u5178\uff08\u54c8\u5e0c\u8868\uff09\u7684C\u6587\u4ef6\u3002\u9605\u8bfb\u8be5\u6587\u4ef6\u9700\u8981\u4e86\u89e3\u54c8\u5e0c\u8868\u7684\u6982\u5ff5\u548c\u5b9e\u73b0\u65b9\u5f0f\uff0c\u4ee5\u53caRedis\u4e2d\u5b57\u5178\u7684\u4f5c\u7528\u548c\u4f7f\u7528\u573a\u666f\u3002\u8be5\u6587\u4ef6\u4e2d\u5305\u542b\u4e86\u5b57\u5178\u7684\u7ed3\u6784\u4f53\u5b9a\u4e49\u3001\u521b\u5efa\u548c\u9500\u6bc1\u5b57\u5178\u7684\u51fd\u6570\u3001\u6dfb\u52a0\u3001\u67e5\u627e\u548c\u5220\u9664\u5143\u7d20\u7684\u51fd\u6570\u7b49\u3002\u9605\u8bfbdict.c\u65f6\u9700\u8981\u6ce8\u610f\u4ee3\u7801\u7684\u7ed3\u6784\u548c\u51fd\u6570\u4e4b\u95f4\u7684\u8c03\u7528\u5173\u7cfb\uff0c\u540c\u65f6\u9700\u8981\u719f\u6089C\u8bed\u8a00\u7684\u57fa\u672c\u8bed\u6cd5\u548c\u6307\u9488\u64cd\u4f5c\u3002",source:"@site/docs/basics/dict.md",sourceDirName:"basics",slug:"/basics/dict",permalink:"/redis-reading/docs/basics/dict",draft:!1,editUrl:"https://github.com/code-reading-lab/redis-reading/tree/docs/docs/basics/dict.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Redis\u6e90\u7801\u9605\u8bfb ae.c",permalink:"/redis-reading/docs/basics/ae"},next:{title:"Redis\u6e90\u7801\u9605\u8bfb adlist.c",permalink:"/redis-reading/docs/basics/adlist"}},l={},c=[{value:"\u6570\u636e\u7ed3\u6784\u5206\u6790",id:"\u6570\u636e\u7ed3\u6784\u5206\u6790",level:2},{value:"\u4e3b\u8981\u7684\u51fd\u6570\u5b9e\u73b0",id:"\u4e3b\u8981\u7684\u51fd\u6570\u5b9e\u73b0",level:2},{value:"Redis \u5982\u4f55\u89e3\u51b3hash\u51b2\u7a81\u7684\u5462",id:"redis-\u5982\u4f55\u89e3\u51b3hash\u51b2\u7a81\u7684\u5462",level:2}],o={toc:c},p="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,i.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"redis\u6e90\u7801\u9605\u8bfb-dictc"},"Redis\u6e90\u7801\u9605\u8bfb dict.c"),(0,a.kt)("p",null,"dict.c\u662fRedis\u6e90\u7801\u4e2d\u5b9e\u73b0\u5b57\u5178\uff08\u54c8\u5e0c\u8868\uff09\u7684C\u6587\u4ef6\u3002\u9605\u8bfb\u8be5\u6587\u4ef6\u9700\u8981\u4e86\u89e3\u54c8\u5e0c\u8868\u7684\u6982\u5ff5\u548c\u5b9e\u73b0\u65b9\u5f0f\uff0c\u4ee5\u53caRedis\u4e2d\u5b57\u5178\u7684\u4f5c\u7528\u548c\u4f7f\u7528\u573a\u666f\u3002\u8be5\u6587\u4ef6\u4e2d\u5305\u542b\u4e86\u5b57\u5178\u7684\u7ed3\u6784\u4f53\u5b9a\u4e49\u3001\u521b\u5efa\u548c\u9500\u6bc1\u5b57\u5178\u7684\u51fd\u6570\u3001\u6dfb\u52a0\u3001\u67e5\u627e\u548c\u5220\u9664\u5143\u7d20\u7684\u51fd\u6570\u7b49\u3002\u9605\u8bfbdict.c\u65f6\u9700\u8981\u6ce8\u610f\u4ee3\u7801\u7684\u7ed3\u6784\u548c\u51fd\u6570\u4e4b\u95f4\u7684\u8c03\u7528\u5173\u7cfb\uff0c\u540c\u65f6\u9700\u8981\u719f\u6089C\u8bed\u8a00\u7684\u57fa\u672c\u8bed\u6cd5\u548c\u6307\u9488\u64cd\u4f5c\u3002"),(0,a.kt)("h2",{id:"\u6570\u636e\u7ed3\u6784\u5206\u6790"},"\u6570\u636e\u7ed3\u6784\u5206\u6790"),(0,a.kt)("p",null,"dict.c\u662fRedis\u4e2d\u5b9e\u73b0\u54c8\u5e0c\u8868\u7684C\u6587\u4ef6\uff0c\u5176\u6570\u636e\u7ed3\u6784\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a"),(0,a.kt)("p",null,"dictEntry\uff1a\u54c8\u5e0c\u8868\u4e2d\u7684\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u5305\u62eckey\u548cvalue\u4e24\u4e2a\u6210\u5458\u3002key\u548cvalue\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u7684\u6307\u9488\uff0c\u901a\u8fc7void*\u8868\u793a\u3002\u5176\u4e2d\uff0ckey\u8868\u793a\u5f53\u524d\u952e\u503c\u5bf9\u7684\u952e\uff0cvalue\u8868\u793a\u5f53\u524d\u952e\u503c\u5bf9\u7684\u503c\u3002"),(0,a.kt)("p",null,"dictType\uff1a\u54c8\u5e0c\u8868\u7c7b\u578b\uff0c\u5305\u62ec\u54c8\u5e0c\u51fd\u6570\u3001\u952e\u6bd4\u8f83\u51fd\u6570\u548c\u503c\u91ca\u653e\u51fd\u6570\u7b49\u3002"),(0,a.kt)("p",null,"dict\uff1a\u54c8\u5e0c\u8868\uff0c\u5305\u62ec\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u3001\u5df2\u4f7f\u7528\u7a7a\u95f4\u3001\u54c8\u5e0c\u8868\u8282\u70b9\u6570\u7ec4\u7b49\u3002\u54c8\u5e0c\u8868\u8282\u70b9\u6570\u7ec4\u4f7f\u7528\u6307\u9488\u6570\u7ec4\u7684\u5f62\u5f0f\u8fdb\u884c\u5b58\u50a8\uff0c\u6bcf\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2adictEntry\u3002"),(0,a.kt)("p",null,"dictht\uff1a\u54c8\u5e0c\u8868\u4e2d\u7684\u4e00\u4e2a\u54c8\u5e0c\u8868\u8282\u70b9\u6570\u7ec4\uff0c\u5305\u62ec\u54c8\u5e0c\u8868\u8282\u70b9\u3001\u54c8\u5e0c\u8868\u5927\u5c0f\u3001\u54c8\u5e0c\u8868\u5df2\u4f7f\u7528\u7a7a\u95f4\u7b49\u3002\u4e00\u4e2a\u54c8\u5e0c\u8868\u4e2d\u5305\u62ec\u4e24\u4e2adictht\uff0c\u5206\u522b\u4e3aht","[0]","\u548cht","[1]","\uff0c\u7528\u4e8e\u5b9e\u73b0\u54c8\u5e0c\u8868\u7684\u6269\u5bb9\u548c\u6536\u7f29\u3002"),(0,a.kt)("p",null,"hash\u51fd\u6570\uff1adict.c\u5b9e\u73b0\u4e86\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u7684hash\u51fd\u6570\uff0c\u901a\u8fc7dictType\u4e2d\u7684hash\u51fd\u6570\u6307\u5b9a\u4f7f\u7528\u54ea\u4e00\u79cdhash\u51fd\u6570\u3002"),(0,a.kt)("p",null,"\u54c8\u5e0c\u8868\u7684\u8fed\u4ee3\u5668\uff1adictIterator\u548cdictEntry\uff0cdictIterator\u7528\u4e8e\u904d\u5386\u54c8\u5e0c\u8868\uff0cdictEntry\u7528\u4e8e\u8868\u793a\u5f53\u524d\u8fed\u4ee3\u5668\u6307\u5411\u7684\u952e\u503c\u5bf9\u3002"),(0,a.kt)("h2",{id:"\u4e3b\u8981\u7684\u51fd\u6570\u5b9e\u73b0"},"\u4e3b\u8981\u7684\u51fd\u6570\u5b9e\u73b0"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u5b9a\u4e49\u4e86\u4e00\u4e2adictEntry\u7ed3\u6784\u4f53\uff0c\u7528\u4e8e\u8868\u793a\u54c8\u5e0c\u8868\u4e2d\u7684\u4e00\u4e2a\u952e\u503c\u5bf9\u3002",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"struct dictEntry {\n void *key;\n union {\n     void *val;\n     uint64_t u64;\n     int64_t s64;\n     double d;\n } v;\n struct dictEntry *next;     /* Next entry in the same hash bucket. */\n void *metadata[];           /* An arbitrary number of bytes (starting at a\n                              * pointer-aligned address) of size as returned\n                              * by dictType's dictEntryMetadataBytes(). */\n };\n")))),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5b9a\u4e49\u4e86\u4e00\u4e2adictType\u7ed3\u6784\u4f53\uff0c\u7528\u4e8e\u8868\u793a\u54c8\u5e0c\u8868\u7684\u7c7b\u578b\uff0c\u5305\u62ec\u54c8\u5e0c\u51fd\u6570\u3001\u952e\u6bd4\u8f83\u51fd\u6570\u548c\u503c\u91ca\u653e\u51fd\u6570\u7b49\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct dictType {\n  uint64_t (*hashFunction)(const void *key);\n  void *(*keyDup)(dict *d, const void *key);\n  void *(*valDup)(dict *d, const void *obj);\n  int (*keyCompare)(dict *d, const void *key1, const void *key2);\n  void (*keyDestructor)(dict *d, void *key);\n  void (*valDestructor)(dict *d, void *obj);\n  int (*expandAllowed)(size_t moreMem, double usedRatio);\n  /* Flags */\n  /* The 'no_value' flag, if set, indicates that values are not used, i.e. the\n  * dict is a set. When this flag is set, it's not possible to access the\n  * value of a dictEntry and it's also impossible to use dictSetKey(). Entry\n  * metadata can also not be used. */\n  unsigned int no_value:1;\n  /* If no_value = 1 and all keys are odd (LSB=1), setting keys_are_odd = 1\n  * enables one more optimization: to store a key without an allocated\n  * dictEntry. */\n  unsigned int keys_are_odd:1;\n  /* TODO: Add a 'keys_are_even' flag and use a similar optimization if that\n  * flag is set. */\n\n  /* Allow each dict and dictEntry to carry extra caller-defined metadata. The\n  * extra memory is initialized to 0 when allocated. */\n  size_t (*dictEntryMetadataBytes)(dict *d);\n  size_t (*dictMetadataBytes)(void);\n  /* Optional callback called after an entry has been reallocated (due to\n  * active defrag). Only called if the entry has metadata. */\n  void (*afterReplaceEntry)(dict *d, dictEntry *entry);\n} dictType;\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5b9a\u4e49\u4e86\u4e00\u4e2adict\u7ed3\u6784\u4f53\uff0c\u7528\u4e8e\u8868\u793a\u54c8\u5e0c\u8868\uff0c\u5305\u62ec\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u3001\u5df2\u4f7f\u7528\u7a7a\u95f4\u3001\u54c8\u5e0c\u8868\u8282\u70b9\u6570\u7ec4\u7b49\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"  struct dict {\n  dictType *type;\n\n  dictEntry **ht_table[2];\n  unsigned long ht_used[2];\n\n  long rehashidx; /* rehashing not in progress if rehashidx == -1 */\n\n  /* Keep small vars at end for optimal (minimal) struct padding */\n  int16_t pauserehash; /* If >0 rehashing is paused (<0 indicates coding error) */\n  signed char ht_size_exp[2]; /* exponent of size. (size = 1<<exp) */\n\n  void metadata[];           / An arbitrary number of bytes (starting at a\n                              * pointer-aligned address) of size as defined\n                              * by dictType's dictEntryBytes. */\n};\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5b9e\u73b0\u4e86\u521b\u5efa\u3001\u6269\u5bb9\u548c\u9500\u6bc1\u54c8\u5e0c\u8868\u7684\u51fd\u6570\uff0c\u5982dictCreate\u3001_dictExpandIfNeeded\u548cdictRelease\u7b49\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"/* Create a new hash table */\ndict *dictCreate(dictType *type)\n{\n    size_t metasize = type->dictMetadataBytes ? type->dictMetadataBytes() : 0;\n    dict *d = zmalloc(sizeof(*d) + metasize);\n    if (metasize) {\n        memset(dictMetadata(d), 0, metasize);\n    }\n\n    _dictInit(d,type);\n    return d;\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5b9e\u73b0\u4e86\u63d2\u5165\u3001\u67e5\u627e\u548c\u5220\u9664\u5143\u7d20\u7684\u51fd\u6570\uff0c\u5982dictAdd\u3001dictFind\u548cdictDelete\u7b49\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"/* Add an element to the target hash table */\nint dictAdd(dict *d, void *key, void *val)\n{\n    dictEntry *entry = dictAddRaw(d,key,NULL);\n\n    if (!entry) return DICT_ERR;\n    if (!d->type->no_value) dictSetVal(d, entry, val);\n    return DICT_OK;\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5b9e\u73b0\u4e86\u54c8\u5e0c\u8868\u7684\u8fed\u4ee3\u5668\uff0c\u5982dictGetIterator\u548cdictNext\u7b49\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-c"}," dictEntry *dictNext(dictIterator *iter)\n {\n     while (1) {\n         if (iter->entry == NULL) {\n             if (iter->index == -1 && iter->table == 0) {\n                 if (iter->safe)\n                     dictPauseRehashing(iter->d);\n                 else\n                     iter->fingerprint = dictFingerprint(iter->d);\n             }\n             iter->index++;\n             if (iter->index >= (long) DICTHT_SIZE(iter->d->ht_size_exp[iter->table])) {\n                 if (dictIsRehashing(iter->d) && iter->table == 0) {\n                     iter->table++;\n                     iter->index = 0;\n                 } else {\n                     break;\n                 }\n             }\n             iter->entry = iter->d->ht_table[iter->table][iter->index];\n         } else {\n             iter->entry = iter->nextEntry;\n         }\n         if (iter->entry) {\n             /* We need to save the 'next' here, the iterator user\n             * may delete the entry we are returning. */\n             iter->nextEntry = dictGetNext(iter->entry);\n             return iter->entry;\n         }\n     }\n     return NULL;\n }\n")))),(0,a.kt)("ol",{start:7},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5b9e\u73b0\u4e86\u54c8\u5e0c\u8868\u7684\u6269\u5c55\u548c\u6536\u7f29\u64cd\u4f5c\uff0c\u5982dictExpand and dictResize\u7b49\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"/* Expand or create the hash table,\n* when malloc_failed is non-NULL, it'll avoid panic if malloc fails (in which case it'll be set to 1).\n* Returns DICT_OK if expand was performed, and DICT_ERR if skipped. */\nint _dictExpand(dict *d, unsigned long size, int* malloc_failed)\n{\n  if (malloc_failed) *malloc_failed = 0;\n\n  /* the size is invalid if it is smaller than the number of\n  * elements already inside the hash table */\n  if (dictIsRehashing(d) || d->ht_used[0] > size)\n      return DICT_ERR;\n\n  /* the new hash table */\n  dictEntry **new_ht_table;\n  unsigned long new_ht_used;\n  signed char new_ht_size_exp = _dictNextExp(size);\n\n  /* Detect overflows */\n  size_t newsize = 1ul<<new_ht_size_exp;\n  if (newsize < size || newsize * sizeof(dictEntry*) < newsize)\n      return DICT_ERR;\n\n  /* Rehashing to the same table size is not useful. */\n  if (new_ht_size_exp == d->ht_size_exp[0]) return DICT_ERR;\n\n  /* Allocate the new hash table and initialize all pointers to NULL */\n  if (malloc_failed) {\n      new_ht_table = ztrycalloc(newsize*sizeof(dictEntry*));\n      *malloc_failed = new_ht_table == NULL;\n      if (*malloc_failed)\n          return DICT_ERR;\n  } else\n      new_ht_table = zcalloc(newsize*sizeof(dictEntry*));\n\n  new_ht_used = 0;\n\n  /* Is this the first initialization? If so it's not really a rehashing\n  * we just set the first hash table so that it can accept keys. */\n  if (d->ht_table[0] == NULL) {\n      d->ht_size_exp[0] = new_ht_size_exp;\n      d->ht_used[0] = new_ht_used;\n      d->ht_table[0] = new_ht_table;\n      return DICT_OK;\n  }\n\n  /* Prepare a second hash table for incremental rehashing */\n  d->ht_size_exp[1] = new_ht_size_exp;\n  d->ht_used[1] = new_ht_used;\n  d->ht_table[1] = new_ht_table;\n  d->rehashidx = 0;\n  return DICT_OK;\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5b9e\u73b0\u4e86\u54c8\u5e0c\u8868\u7684\u7edf\u8ba1\u548c\u8c03\u8bd5\u51fd\u6570\uff0c\u5982dictSize\u548cdictGetStats\u7b49\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"#define dictSize(d) ((d)->ht_used[0]+(d)->ht_used[1])\n")))),(0,a.kt)("h2",{id:"redis-\u5982\u4f55\u89e3\u51b3hash\u51b2\u7a81\u7684\u5462"},"Redis \u5982\u4f55\u89e3\u51b3hash\u51b2\u7a81\u7684\u5462"),(0,a.kt)("p",null,"Redis\u4f7f\u7528\u54c8\u5e0c\u8868\uff08hash table\uff09\u6765\u5b9e\u73b0\u5b57\u5178\uff08dictionary\uff09\u6570\u636e\u7ed3\u6784\u3002\u5f53\u591a\u4e2a\u952e\u88ab\u6620\u5c04\u5230\u54c8\u5e0c\u8868\u7684\u540c\u4e00\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u54c8\u5e0c\u51b2\u7a81\uff08hash collision\uff09\u3002"),(0,a.kt)("p",null,"Redis\u901a\u8fc7\u94fe\u8868\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6bcf\u4e2a\u54c8\u5e0c\u8868\u8282\u70b9\u90fd\u5305\u542b\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u3002\u5f53\u591a\u4e2a\u952e\u88ab\u6620\u5c04\u5230\u54c8\u5e0c\u8868\u7684\u540c\u4e00\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u65f6\uff0cRedis\u4f1a\u5c06\u5b83\u4eec\u5b58\u50a8\u5728\u540c\u4e00\u4e2a\u94fe\u8868\u4e2d\u3002"),(0,a.kt)("p",null,"\u5728\u67e5\u627e\u54c8\u5e0c\u8868\u4e2d\u7684\u952e\u65f6\uff0c\u9996\u5148\u6839\u636e\u952e\u8ba1\u7b97\u51fa\u54c8\u5e0c\u503c\uff0c\u7136\u540e\u627e\u5230\u5bf9\u5e94\u7684\u7d22\u5f15\u4f4d\u7f6e\u3002\u5982\u679c\u8be5\u4f4d\u7f6e\u4e0a\u7684\u8282\u70b9\u662f\u4e00\u4e2a\u94fe\u8868\uff0c\u5219\u9700\u8981\u904d\u5386\u94fe\u8868\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u76f4\u5230\u627e\u5230\u4e0e\u76ee\u6807\u952e\u5339\u914d\u7684\u8282\u70b9\u4e3a\u6b62\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u201c\u94fe\u5f0f\u67e5\u627e\u201d\uff08chaining\uff09\u3002"),(0,a.kt)("p",null,"\u5bf9\u4e8e\u6bd4\u8f83\u5c0f\u7684\u54c8\u5e0c\u8868\uff0c\u94fe\u5f0f\u67e5\u627e\u662f\u4e00\u4e2a\u975e\u5e38\u9ad8\u6548\u7684\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\u7684\u65b9\u6cd5\u3002\u5982\u679c\u54c8\u5e0c\u8868\u53d8\u5f97\u8fc7\u4e8e\u62e5\u6324\uff0cRedis\u4f1a\u81ea\u52a8\u5c06\u5176\u6269\u5c55\uff0c\u4ee5\u4fdd\u8bc1\u54c8\u5e0c\u8868\u7684\u8d1f\u8f7d\u56e0\u5b50\uff08load factor\uff09\u4e0d\u8d85\u8fc71\u3002"),(0,a.kt)("p",null,"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u94fe\u5f0f\u67e5\u627e\u867d\u7136\u80fd\u591f\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\uff0c\u4f46\u662f\u5f53\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u6570\u91cf\u53d8\u5f97\u975e\u5e38\u5927\u65f6\uff0c\u6027\u80fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u56e0\u6b64\uff0c\u5f53\u54c8\u5e0c\u8868\u4e2d\u7684\u952e\u503c\u5bf9\u6570\u91cf\u6bd4\u8f83\u5927\u65f6\uff0c\u5e94\u8be5\u8003\u8651\u4f7f\u7528\u5176\u4ed6\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982\u5f00\u653e\u5730\u5740\u6cd5\uff08open addressing\uff09\u6216\u4e8c\u6b21\u63a2\u6d4b\u6cd5\uff08quadratic probing\uff09\u3002"),(0,a.kt)("p",null,"\u5177\u4f53\u7247\u6bb5\u4e3a\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"}," for (table = 0; table <= 1; table++) {\n        idx = hash & DICTHT_SIZE_MASK(d->ht_size_exp[table]);\n        /* Search if this slot does not already contain the given key */\n        he = d->ht_table[table][idx];\n        while(he) {\n            void *he_key = dictGetKey(he);\n            if (key == he_key || dictCompareKeys(d, key, he_key)) {\n                if (existing) *existing = he;\n                return NULL;\n            }\n            he = dictGetNext(he);\n        }\n        if (!dictIsRehashing(d)) break;\n    }\n")),(0,a.kt)("p",null,"\u5f53\u4e00\u4e2a\u65b0\u5143\u7d20\uff08\u952e\u503c\u5bf9\uff09\u9700\u8981\u6dfb\u52a0\u5230\u54c8\u5e0c\u8868\u4e2d\u65f6\uff0c\u4f1a\u5148\u8ba1\u7b97\u952e\u7684\u54c8\u5e0c\u503c\uff0c\u7136\u540e\u786e\u5b9a\u952e\u5728\u54c8\u5e0c\u8868\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\u3002\u5982\u679c\u8be5\u4f4d\u7f6e\u4e0a\u5df2\u7ecf\u6709\u8282\u70b9\uff0c\u5219\u9700\u8981\u8fdb\u884c\u94fe\u5f0f\u67e5\u627e\uff0c\u76f4\u5230\u627e\u5230\u4e0e\u76ee\u6807\u952e\u76f8\u540c\u7684\u8282\u70b9\u6216\u904d\u5386\u5b8c\u6574\u4e2a\u94fe\u8868\u4e3a\u6b62\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u4e0e\u76ee\u6807\u952e\u76f8\u540c\u7684\u8282\u70b9\uff0c\u5219\u9700\u8981\u6dfb\u52a0\u65b0\u8282\u70b9\u3002"))}h.isMDXComponent=!0}}]);